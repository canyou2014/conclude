一.kalibr camera-imu外参标定 https://github.com/ethz-asl/kalibr
1.安装，参考kalibr的wiki(https://github.com/ethz-asl/kalibr/wiki/installation)
  1）安装ros indigo
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu trusty main" > /etc/apt/sources.list.d/ros-latest.list' 
wget http://packages.ros.org/ros.key -O - | sudo apt-key add - 
sudo apt-get update 
sudo apt-get install ros-indigo-desktop python-rosinstall python-rosdep -y 
rosdep init 
rosdep update
  2）安装依赖项
sudo apt-get install python-setuptools python-rosinstall ipython libeigen3-dev libboost-all-dev doxygen libopencv-dev ros-indigo-vision-opencv ros-indigo-image-transport-plugins ros-indigo-cmake-modules python-software-properties software-properties-common libpoco-dev python-matplotlib python-git python-pip ipython libtbb-dev libblas-dev liblapack-dev python-catkin-tools libv4l-dev 

sudo pip install python-igraph --upgrade
  3）创建catkin工作空间,安装kalibr
mkdir -p ~/kalibr_workspace/src 
cd ~/kalibr_workspace 
source /opt/ros/indigo/setup.bash 
catkin init 
catkin config --extend /opt/ros/indigo 
catkin config --cmake-args -DCMAKE_BUILD_TYPE=Release

cd ~/kalibr_workspace/src 
git clone https://github.com/ethz-asl/Kalibr.git
//编译
cd ~/kalibr_workspace 
catkin build -DCMAKE_BUILD_TYPE=Release -j4
//加到环境变量
echo "source ~/kalibr_workspace/devel/setup.bash" >> ~/.bashrc
source ~/.bashrc	

2.准备文件
  1)bag   需要将camera数据和imu数据按照格式打包成bag格式(https://github.com/ethz-asl/kalibr/wiki/bag-format)
    文件夹格式:
	+-- dataset-dir
	    +-- cam0
	    │   +-- 1385030208726607500.png
	    │   +--      ...
	    │   \-- 1385030212176607500.png
	    +-- cam1
	    │   +-- 1385030208726607500.png
	    │   +--      ...
	    │   \-- 1385030212176607500.png
	    \-- imu0.csv
    imu0.csv格式：(timestamps=[ns], omega=[rad/s], alpha=[m/s^2])
	timestamp,omega_x,omega_y,omega_z,alpha_x,alpha_y,alpha_z
	1385030208736607488,0.5,-0.2,-0.1,8.1,-1.9,-3.3
 	...
	1386030208736607488,0.5,-0.1,-0.1,8.1,-1.9,-3.3
    然后运行:kalibr_bagcreater --folder dataset-dir --output-bag awsome.bag (其中aswome.bag为输出的bag文件名，自行命名)
  2)yaml  包括imu参数（加计和陀螺的噪声密度，随机游走），相机内参，标定模板参数共三个文件（https://github.com/ethz-asl/kalibr/wiki/yaml-formats）
3.开始标定
  运行：kalibr_calibrate_imu_camera --target april_6x6.yaml --cam camchain.yaml --imu imu_adis16448.yaml --bag dynamic.bag --bag-from-to 5 45
  其中april_6x6.yaml，camchain.yaml，imu_adis16448.yaml，dynamic.bag分别为标定模板，相机内参，imu噪声参数文件以及数据集bag， 5 45表示取5到45s内的数据。kalibr_calibrate_imu_camera --h则表示对imu和camera时间漂移进行标定。
####################################################################
二.rovio （https://github.com/ethz-asl/rovio） 
1.安装
  1)安装依赖项，ros和kindr (https://github.com/ethz-asl/kindr)
  2)同kalibr创建catkin工作空间，终端进入lightweight_filtering文件夹运行：git submodule update --init --recursive
  3)编译：catkin build rovio --cmake-args -DCMAKE_BUILD_TYPE=Release 或 catkin build rovio --cmake-args -DCMAKE_BUILD_TYPE=Release -DMAKE_SCENE=ON（显示结果）
  4)添加环境变量:source ~/workspace/devel/setup.bash  或添加到.bashrc: echo "source ~/workspace/devel/setup.bash" >> ~/.bashrc
2.运行: 1)roscore  2)运行launch：roslaunch rovio rovio_node.launch  3)播放数据：rosbag play dataset.bag
3.配置文件：在cfg/rovio.info 为大部分参数，包括camera-imu外参，初始状态，初始协防差参数，噪声参数等; cfg/中其他文件为camera内参
4.修改从bag读取到直接从文件夹中读取，从src/rovio_rosbag_loader.cpp,和include/RovioNode.hpp中修改，现已修改读取imu数据和camera数据部分

#########################################################################
三.okvis （https://github.com/ethz-asl/okvis）
  1.安装：按照okvis的readme.d安装即可，安装和编译时需要翻墙
  2.运行：./okvis_app_synchronous path/to/okvis/config/config_fpga_p2_euroc.yaml path/to/MH_01_easy/mav0/  其中两个参数分别为confi文件和数据集路径
  3.需要修改输入输出格式，修改/okvis_apps/okvis_app_synchronous.cpp 文件
  4.配置config文件，根据okvis/config/config_fpga_p2_euroc.yaml格式进行修改

#########################################################################
四.multi sensor fusion(https://github.com/ethz-asl/ethzasl_sensor_fusion或https://github.com/ethz-asl/ethzasl_msf)
  说明：已去除ros,输入是slam得到的pose或position，以及imu六轴数据-陀螺和加计
  slam.csv格式：
  	timestamp[ns], p_RS_R_x [m], p_RS_R_y [m], p_RS_R_z [m], q_RS_w [], q_RS_x [], q_RS_y [], q_RS_z []
	1385030208736607488,0.5,-0.2,-0.1,8.1,-0.49,-0.43, 0.7
 	...
	1386030208736607488,0.5,-0.1,-0.1,8.1,-0.49,-0.43, 0.7

  imu0.csv格式：
	timestamp[ns] ,omega_x[rad/s],omega_y[rad/s],omega_z[rad/s],alpha_x[m/s^2],alpha_y[m/s^2],alpha_z[m/s^2]
	1385030208736607488,0.5,-0.2,-0.1,8.1,-1.9,-3.3
 	...
	1386030208736607488,0.5,-0.1,-0.1,8.1,-1.9,-3.3
#########################################################################
五.OS3D-FG的使用
  1.连接USB，如果没相应usb驱动，请在线更新
  2.通过设备管理器-端口查看端口号com，修改Debug/Release中inertiallabs_sdk_lite.ini配置文件的com，并修改频率等相关设置
  3.SDK使用：
     1) int device = iInertialLabs_SDK_Lite_CreateDevice(workset)  //连接设备，workset为inertiallabs_sdk_lite.ini配置文件中的worksetNode号
     2) getSensorsData(device) //获取数据
     3) dataReceiver函数data类型可以是:iInertialLabs_SDK_Lite_DataFrame，iInertialLabs_SDK_Lite_FullDataEntry，iInertialLabs_SDK_Lite_DataQuatEntry， iInertialLabs_SDK_Lite_DataCalibratedEntry
        用iInertialLabs_SDK_Lite_DataFrame时，则可通过data->DataEntry[0].Calibrated.dCalibratedAcc获取矫正后的数据，通过data->DataEntry[0].Raw.dAcc获取原书数据，以此类推
     4) iInertialLabs_SDK_Lite_CloseDevice(device) //关闭设备
########################################################################
六.Tango SDK(https://developers.google.com/tango/apis/java/)
   1.现在这个设备的tango core版本较旧，无法使用最新的tango，可使用旧版本SDK,或者更新tango内核，再更新tango core（不更新内核无法更新tango core），然后可以使用最新版本的SDK（参考https://github.com/googlesamples/tango-examples-java/issues/72）
   2.获取camera-imu外参：
        TangoCoordinateFramePair framePair = new TangoCoordinateFramePair();
        TangoPoseData color2IMUPose = new TangoPoseData();
        framePair.baseFrame = TangoPoseData.COORDINATE_FRAME_IMU;
        framePair.targetFrame = TangoPoseData.COORDINATE_FRAME_CAMERA_COLOR;
        color2IMUPose = mTango.getPoseAtTime(0.0, framePair); // color2IMUPose.getTranslationAsFloats()和color2IMUPose.getRotationAsFloats()
   3.获取camera内参：
        TangoCameraIntrinsics mTangopara = mTango.getCameraIntrinsics(TangoCameraIntrinsics.TANGO_CAMERA_FISHEYE);
#######################################################################
七.META头盔的IMU姿态的初步融合
   1.IMU数据获取，通过credis获取
   2.IMU固定偏差矫正:resolveImu.startIMUTimer(0);
   3.通过IMU计算位姿:resolveImu.startIMUTimer(1);
   4.获取计算之后的位姿：resolveImu.getIMURT(cbn,pos); 
#######################################################################
八.ORB_SLAM2_ANDROID 和PTAM_ANDROID
   直接导入eclipse就能够运行



